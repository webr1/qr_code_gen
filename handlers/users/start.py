import time
from pathlib import Path
import pyqrcode
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from data.config import ADMINS
from loader import dp, bot
from keyboards.default.defold_keys import main_menu
from states.code_qr import QRStates, Textabout

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
QR_CODES_DIR = Path("E:/qr_code_gen/photoes")
QR_CODES_DIR.mkdir(parents=True, exist_ok=True)


@dp.message_handler(CommandStart())
async def bot_start(msg: types.Message):
    username = msg.from_user.username
    full_name = msg.from_user.full_name
    telegram_id = msg.from_user.id
    await msg.answer(
        f"–ü—Ä–∏–≤–µ—Ç, [{msg.from_user.full_name}]! üëã –Ø —Ç–≤–æ–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è QR-–∫–æ–¥",
        reply_markup=main_menu
    )

    info = (
        f"User haqida informatsiya\n"
        f"User_name: @{username}\n"
        f"User_id: {telegram_id}\n"
        f"User_full_name: {full_name}\n"
    )

    for admin in ADMINS:
        await bot.send_message(admin, info)



@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å QRcodeüí´‚≠êÔ∏è")
async def qr_call_handler(msg: types.Message):
    await msg.answer(
        f"–ü—Ä–∏–≤–µ—Ç, [{msg.from_user.username}]! üòÑ –Ø —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! "
        "–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è QR-–∫–æ–¥. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, "
        "–∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –∏ —è —Å–¥–µ–ª–∞—é QR-–∫–æ–¥!‚å®Ô∏èüíªüíæ"
    )
    await QRStates.waiting_for_text.set()


@dp.message_handler(state=QRStates.waiting_for_text)
async def qr_handler(msg: types.Message, state: FSMContext):
    try:
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr_code = pyqrcode.create(msg.text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = int(time.time())
        filename = f"{msg.chat.id}_{timestamp}_{msg.from_user.id}.png"
        filepath = QR_CODES_DIR / filename

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥
        qr_code.png(str(filepath), scale=6)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not filepath.exists():
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filepath, 'rb') as photo:
            await bot.send_photo(
                chat_id=msg.chat.id,
                photo=photo,
                caption=f"‚ú® <b>–í–∞—à QR-–∫–æ–¥ –≥–æ—Ç–æ–≤!</b> ‚ú®\n\n"
                        f"üîπ <i>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ</i> üîπ\n\n"
                        f"‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n"
                        f"<code>–°–æ–∑–¥–∞–Ω–æ: @QRcode_webr1_bot</code>",
                parse_mode="HTML"
            )
    except Exception as e:
        await msg.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()


@dp.message_handler(text='–û—Ç–∑—ã–≤‚å®Ô∏èüì©')
async def comment_handler(message: types.Message):
    await message.answer(
        "üìù *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤*\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –û—Å—Ç–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.",
        parse_mode="Markdown"
    )
    await Textabout.text1.set()


@dp.message_handler(state=Textabout.text1)
async def com_handler(message: types.Message, state: FSMContext):
    try:
        text1 = message.text
        await state.update_data({"text1": text1})
        data = await state.get_data()
        comments = data.get("text1")

        info = (
            f"Here is information about comment\n"
            f"Text - {comments}\n"
            f"Info from nameuser {message.from_user.username}\n"
            f"id {message.from_user.id}\n"
            f"fullname {message.from_user.full_name}\n"
        )

        for admin in ADMINS:
            await bot.send_message(admin, info)

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç, —Å–ø–∞—Å–∏–±–æ‚úÖ")
    finally:
        await state.finish()







